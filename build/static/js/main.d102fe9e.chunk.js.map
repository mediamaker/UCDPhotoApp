{"version":3,"sources":["photos.js","App.js","serviceWorker.js","index.js"],"names":["photos","App","useState","currentImage","setCurrentImage","viewerIsOpen","setViewerIsOpen","openLightbox","useCallback","event","photo","index","onClick","onClose","currentIndex","views","map","x","srcset","srcSet","caption","author","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mOAAaA,EAAS,CAAC,CACnB,GAAM,OACN,OAAU,aACV,MAAS,KACT,OAAU,KACV,IAAO,0CACP,IAAO,2CACR,CACC,GAAM,OACN,OAAU,eACV,MAAS,KACT,OAAU,KACV,IAAO,0CACP,IAAO,2CACR,CACC,GAAM,OACN,OAAU,aACV,MAAS,KACT,OAAU,IACV,IAAO,0CACP,IAAO,2CACR,CACC,GAAM,OACN,OAAU,sBACV,MAAS,IACT,OAAU,IACV,IAAO,0CACP,IAAO,2CACR,CACC,GAAM,OACN,OAAU,iBACV,MAAS,KACT,OAAU,KACV,IAAO,0CACP,IAAO,2CACR,CACC,GAAM,OACN,OAAU,gBACV,MAAS,KACT,OAAU,KACV,IAAO,0CACP,IAAO,2CACR,CACC,GAAM,OACN,OAAU,eACV,MAAS,KACT,OAAU,KACV,IAAO,0CACP,IAAO,2CACR,CACC,GAAM,MACN,OAAU,YACV,MAAS,KACT,OAAU,KACV,IAAO,0CACP,IAAO,0CACR,CACC,GAAM,OACN,OAAU,uBACV,MAAS,KACT,OAAU,KACV,IAAO,0CACP,IAAO,2CACR,CACC,GAAM,OACN,OAAU,eACV,MAAS,KACT,OAAU,KACV,IAAO,0CACP,IAAO,2CACR,CACC,GAAM,OACN,OAAU,kBACV,MAAS,IACT,OAAU,KACV,IAAO,0CACP,IAAO,2CACR,CACC,GAAM,OACN,OAAU,eACV,MAAS,KACT,OAAU,KACV,IAAO,0CACP,IAAO,2CACR,CACC,GAAM,OACN,OAAU,sEACV,MAAS,KACT,OAAU,KACV,IAAO,0CACP,IAAO,2CACR,CACC,GAAM,OACN,OAAU,gBACV,MAAS,KACT,OAAU,KACV,IAAO,0CACP,IAAO,2CACR,CACC,GAAM,OACN,OAAU,oBACV,MAAS,KACT,OAAU,KACV,IAAO,0CACP,IAAO,2CACR,CACC,GAAM,OACN,OAAU,qBACV,MAAS,KACT,OAAU,KACV,IAAO,0CACP,IAAO,4CCjEIC,MArCf,WAAe,MAE2BC,mBAAS,GAFpC,mBAENC,EAFM,KAEQC,EAFR,OAG2BF,oBAAS,GAHpC,mBAGNG,EAHM,KAGQC,EAHR,KAKPC,EAAeC,uBAAY,SAACC,EAAD,GAA6B,EAAnBC,MAAoB,IAAbC,EAAY,EAAZA,MAChDP,EAAgBO,GAChBL,GAAgB,KACf,IAOH,OACE,6BACA,kBAAC,IAAD,CAASN,OAAQA,EAAQY,QAASL,IAClC,kBAAC,IAAD,KACGF,EACC,kBAAC,IAAD,CAAOQ,QAVS,WACpBT,EAAgB,GAChBE,GAAgB,KASV,kBAAC,IAAD,CACEQ,aAAcX,EACdY,MAAOf,EAAOgB,KAAI,SAAAC,GAAC,sBACdA,EADc,CAEjBC,OAAQD,EAAEE,OAEVC,QAASH,EAAEI,eAIf,QC5BUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.d102fe9e.chunk.js","sourcesContent":["export const photos = [{\n    \"id\": \"1012\",\n    \"author\": \"Scott Webb\",\n    \"width\": 3973,\n    \"height\": 2639,\n    \"url\": \"https://unsplash.com/photos/uAgLGG1WBd4\",\n    \"src\": \"https://picsum.photos/id/1012/3973/2639\"\n}, {\n    \"id\": \"1013\",\n    \"author\": \"Cayton Heath\",\n    \"width\": 4256,\n    \"height\": 2832,\n    \"url\": \"https://unsplash.com/photos/D8LcRLwZyPs\",\n    \"src\": \"https://picsum.photos/id/1013/4256/2832\"\n}, {\n    \"id\": \"1014\",\n    \"author\": \"Oscar Keys\",\n    \"width\": 6016,\n    \"height\": 4000,\n    \"url\": \"https://unsplash.com/photos/AmPRUnRb6N0\",\n    \"src\": \"https://picsum.photos/id/1014/6016/4000\"\n}, {\n    \"id\": \"1015\",\n    \"author\": \"Alexey Topolyanskiy\",\n    \"width\": 6000,\n    \"height\": 4000,\n    \"url\": \"https://unsplash.com/photos/-oWyJoSqBRM\",\n    \"src\": \"https://picsum.photos/id/1015/6000/4000\"\n}, {\n    \"id\": \"1016\",\n    \"author\": \"Philippe Wuyts\",\n    \"width\": 3844,\n    \"height\": 2563,\n    \"url\": \"https://unsplash.com/photos/_h7aBovKia4\",\n    \"src\": \"https://picsum.photos/id/1016/3844/2563\"\n}, {\n    \"id\": \"1018\",\n    \"author\": \"Andrew Ridley\",\n    \"width\": 3914,\n    \"height\": 2935,\n    \"url\": \"https://unsplash.com/photos/Kt5hRENuotI\",\n    \"src\": \"https://picsum.photos/id/1018/3914/2935\"\n}, {\n    \"id\": \"1019\",\n    \"author\": \"Patrick Fore\",\n    \"width\": 5472,\n    \"height\": 3648,\n    \"url\": \"https://unsplash.com/photos/V6s1cmE39XM\",\n    \"src\": \"https://picsum.photos/id/1019/5472/3648\"\n}, {\n    \"id\": \"102\",\n    \"author\": \"Ben Moore\",\n    \"width\": 4320,\n    \"height\": 3240,\n    \"url\": \"https://unsplash.com/photos/pJILiyPdrXI\",\n    \"src\": \"https://picsum.photos/id/102/4320/3240\"\n}, {\n    \"id\": \"1020\",\n    \"author\": \"Adam Willoughby-Knox\",\n    \"width\": 4288,\n    \"height\": 2848,\n    \"url\": \"https://unsplash.com/photos/_snqARKTgoc\",\n    \"src\": \"https://picsum.photos/id/1020/4288/2848\"\n}, {\n    \"id\": \"1021\",\n    \"author\": \"Frances Gunn\",\n    \"width\": 2048,\n    \"height\": 1206,\n    \"url\": \"https://unsplash.com/photos/8BmNurlVR6M\",\n    \"src\": \"https://picsum.photos/id/1021/2048/1206\"\n}, {\n    \"id\": \"1022\",\n    \"author\": \"Vashishtha Jogi\",\n    \"width\": 6000,\n    \"height\": 3376,\n    \"url\": \"https://unsplash.com/photos/bClr95glx6k\",\n    \"src\": \"https://picsum.photos/id/1022/6000/3376\"\n}, {\n    \"id\": \"1023\",\n    \"author\": \"William Hook\",\n    \"width\": 3955,\n    \"height\": 2094,\n    \"url\": \"https://unsplash.com/photos/93Ep1dhTd2s\",\n    \"src\": \"https://picsum.photos/id/1023/3955/2094\"\n}, {\n    \"id\": \"1024\",\n    \"author\": \"Мартин Тасев\",\n    \"width\": 1920,\n    \"height\": 1280,\n    \"url\": \"https://unsplash.com/photos/7ALI0RYyq6s\",\n    \"src\": \"https://picsum.photos/id/1024/1920/1280\"\n}, {\n    \"id\": \"1025\",\n    \"author\": \"Matthew Wiebe\",\n    \"width\": 4951,\n    \"height\": 3301,\n    \"url\": \"https://unsplash.com/photos/U5rMrSI7Pn4\",\n    \"src\": \"https://picsum.photos/id/1025/4951/3301\"\n}, {\n    \"id\": \"1026\",\n    \"author\": \"Dmitrii Vaccinium\",\n    \"width\": 4621,\n    \"height\": 3070,\n    \"url\": \"https://unsplash.com/photos/Q47eNv_UvfM\",\n    \"src\": \"https://picsum.photos/id/1026/4621/3070\"\n}, {\n    \"id\": \"1027\",\n    \"author\": \"Roksolana Zasiadko\",\n    \"width\": 2848,\n    \"height\": 4272,\n    \"url\": \"https://unsplash.com/photos/LyeduBb2Auk\",\n    \"src\": \"https://picsum.photos/id/1027/2848/4272\"\n}];","// Developed in June 2020 by John Cozen for UC Davis\n// Based on 'React-photo-gallery' by @Neptunian on Github https://github.com/neptunian/react-photo-gallery\n\nimport React, { useState, useCallback } from \"react\";\nimport './App.css';\nimport Carousel, { Modal, ModalGateway } from \"react-images\";\nimport Gallery from \"react-photo-gallery\";\nimport { photos } from \"./photos\";\n\nfunction App() {\n  //setup photo lightbox\n  const [currentImage, setCurrentImage] = useState(0);\n  const [viewerIsOpen, setViewerIsOpen] = useState(false);\n\n  const openLightbox = useCallback((event, { photo, index }) => {\n    setCurrentImage(index);\n    setViewerIsOpen(true);\n  }, []);\n\n  const closeLightbox = () => {\n    setCurrentImage(0);\n    setViewerIsOpen(false);\n  };\n\n  return (\n    <div>\n    <Gallery photos={photos} onClick={openLightbox} />\n    <ModalGateway>\n      {viewerIsOpen ? (\n        <Modal onClose={closeLightbox}>\n          <Carousel\n            currentIndex={currentImage}\n            views={photos.map(x => ({\n              ...x,\n              srcset: x.srcSet,\n              //TODO: Turn author value into photo caption in Lightbox view\n              caption: x.author\n            }))}\n          />\n        </Modal>\n      ) : null}\n    </ModalGateway>\n  </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}